@page "/plans"
@using Corelibs.Basic.Collections;
@using MyApp.UI.Common.Data;
@using MyApp.UseCases.Plans;
@using Corelibs.Basic.Reflection;

<FullBg ImageUrl=@($@"{Config.BaseAssetsPath}/images/general/main-bg.png") />

@if (_plans.IsNullOrEmpty()) { return; }

<div class="grid-1x2f">
    <div class="v-list">
        <div class="grid-1x2">
            <List_1 
                Title="Your Plans"
                ListItems=@_listItems
                OnMenuOptionSelected=@OnWorkoutPlansListDropdownOptionSelected />
        </div>
    </div>
    <div class="v-list">
        <DropdownWithLabel 
            Title="Ownership"
            Model=@OwnershipFilterDropdownModel 
            OnOptionSelected=OnOwnershipFilterDropdownModelOptionSelected />
    </div>
</div>

@code {
    [Inject] public IQueryExecutor QueryExecutor { get; set; }

    private PlanVM[] _plans;
    private List_1.ListItemsModel _listItems = new();

    protected override async Task OnInitializedAsync()
    {
        var response = await QueryExecutor.Execute<GetOwnPlansQuery, GetOwnPlansQueryResponse>();
        _plans = response?.Plans;

        _listItems.Values = _plans.Select(p => new List_1.ListItem(p.Id, p.Name)).ToList();
    }

    private async Task<bool> OnWorkoutPlansListDropdownOptionSelected(Dropdown.Option option)
    {
        Console.WriteLine(option.ToString());
        return true;
    }

    private async Task<bool> OnOwnershipFilterDropdownModelOptionSelected(Dropdown.Option option)
    {
        Console.WriteLine(option.ToString());
        return true;
    }

    private Task OnItemClick(string id)
    {
        Console.WriteLine("OnItemClick");
        return Task.CompletedTask;
    }

    private static Dropdown.ViewModel DropdownModel = new(
        Options: new()
        {
            "Add",
            "Remove",
            "Edit"
        },
        Trigger: new(IsFixed: true, Value: "Menu", Mode: Dropdown.Mode.Component)
    );

    private Dropdown.ViewModel OwnershipFilterDropdownModel = new(
        Options: new()
        {
            "Own",
            "Public",
            "All"
        },
        Trigger: new(BgOn: true)
    );
}
